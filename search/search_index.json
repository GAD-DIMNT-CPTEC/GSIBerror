{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GSIBerror","text":""},{"location":"#gsiberror","title":"GSIBerror","text":"<p><code>GSIBerror</code> is a Python package aimed to read the records and attributes from the background error covariance matrices compatible with the Gridpoint Statistical Interpolation (in the <code>.gcv</code> file format, global grid).</p> <p>See the screencast below to get an overview of the package usage. You can also use the Google Colab platform to explore the Jupyter notebooks in the repository. </p> <p></p> <p></p>"},{"location":"en/","title":"GSIBerror","text":""},{"location":"en/#gsiberror","title":"GSIBerror","text":"<p><code>GSIBerror</code> is a Python package aimed to read the records and attributes from the background error covariance matrices compatible with the Gridpoint Statistical Interpolation (in the <code>.gcv</code> file format, global grid).</p> <p>See the screencast below to get an overview of the package usage. You can also use the Google Colab platform to explore the Jupyter notebooks in the repository. </p> <p></p> <p></p>"},{"location":"en/install/","title":"Installation","text":""},{"location":"en/install/#installation","title":"Installation","text":"<p>The installation of the <code>GSIBerror</code> package can be made through pip or the git repository. In this page, there are presented the methods so the user can choose what best fit their needs.</p> <p>Warning</p> <p>Before you begin, make sure you have a Python distribution installed in your computer. To make it easier, it is recommended to install of Miniconda.</p>"},{"location":"en/install/#pip","title":"Pip","text":"<p>To install <code>GSIBerror</code> package, first create a Python virtual environment using <code>venv</code> and install the package using <code>pip</code>:</p> <pre><code>python -m venv GSIBerror\nsource GSIBerror/bin/activate\npip install GSIBerror\n</code></pre> <p>It is also possible to use <code>conda</code> to install the <code>GSIBerror</code> package. In the same way demonstrated by using the <code>venv</code>, use <code>conda</code> to create the virtual environment and install the <code>GSIBerror</code> package using <code>pip</code>:</p> <pre><code>conda create -n GSIBerror python=3.9.18\nconda activate GSIBerror\npip install GSIBerror\n</code></pre> <p>Note</p> <p>When you use <code>conda</code> to create a Python virtual environment for the <code>GSIBerror</code> package, it in necessary to indicate which python version must be installed. It will allow the <code>GSIBerror</code> to be used along with its basic dependencies (i.e., <code>xarray</code>, <code>numpy</code>, <code>cartopy</code> e <code>matplotlib</code>). When you use <code>venv</code>, both <code>python</code> and <code>pip</code> are automatically installed.</p>"},{"location":"en/install/#repository","title":"Repository","text":"<p>In the project repository, there is a file called <code>environment.yml</code> that can be used to create an Anaconda Python environment with all the libraries and packages needed for its use.</p> <p>To create a Python environment for the <code>GSIBerror</code> package using <code>conda</code> and the <code>environment.yml</code> file, download the latest release and execute the commands:</p> <pre><code>gh repo clone GAD-DIMNT-CPTEC/GSIBerror\ncd GSIBerror\nconda env create -f environment.yml\n</code></pre> <p>After that, activate the new environment by issuing:</p> <pre><code>conda activate GSIBerror\n</code></pre> <p>Tip</p> <p>If you want to contribute to the <code>GSIBerror</code> development, it is recommended to install the code using the repository method.</p> <p>With the installation of the <code>GSIBerror</code> package done, explore the available notebooks in the repository with a demonstration of the package.</p>"},{"location":"en/usage/","title":"Usage","text":""},{"location":"en/usage/#usage","title":"Usage","text":"<p>This page presents some usage examples of the <code>Berror</code> class from the <code>GSIBerror</code> package. These examples consider two different background error covariances matrices - one provided by the Developmental Testbed Center (DTC) and another calculated by using pairs of 48 and 24-hours forecasts from the Braziliand Atmospheric Model (BAM) from the Center for Weather Forecasts and Climate Studies (CPTEC)<sup>1</sup>, using the NMC method.</p> <p>Info</p> <p>A version of this page for the Juptyter Notebook can be found at https://github.com/GAD-DIMNT-CPTEC/GSIBerror/blob/main/notebooks/read_gsi_berror_python-class-final-en.ipynb.</p> <p>If you want to interact with the notebook, click on the button below to open Google Colab.</p> <p> </p>"},{"location":"en/usage/#the-berror-class","title":"The <code>Berror</code> class","text":"<p>To use the class, load it with the following command:</p> Command <pre><code>import gsiberror as gb\n</code></pre> <p>The following python modules are optional and can be loaded in case the user wants to plot the matrix records. The module <code>cartopy</code> is loaded to plot the coastlines for the records related to <code>sst</code> (sea surface temperature) only, since the remainder of the records are latitude-dependent.</p> Command <pre><code>import os\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n</code></pre> <p>Info</p> <p>In the repository, there is a script called <code>plot_functions.py</code> where some auxiliary ploting functions are implemented to use along with the <code>Berror</code> class. See an example of its usage in the notebook <code>read_gsi_berror_python-class-final-BCPTEC_hyb_coord.ipynb</code>. </p>"},{"location":"en/usage/#defining-the-covariance-files","title":"Defining the covariance files","text":"<p>In the following section, the file to be read is defined. In this example, two matrices are handled at the same time, <code>fncep</code> (the DTC matrix) and <code>fcptec</code> (the CPTEC matrix). Both matrices have different dimensions, which will be further inspected:</p> Command <pre><code>path = '/dados/das/pesq1/BAM.berror/xc50/'\n\nbcptec = 'gsir4.berror_stats.gcv.BAM.TQ0062L028'\nbncep = 'global_berror.l64y386.f77-ncep-dtc.gcv'\n\nfncep = os.path.join(path, bncep)\nfcptec = os.path.join(path, bcptec)\n</code></pre> <p>Warning</p> <p>The <code>path</code> variable must the set up by the user to reflect the correct path to where the matrices files <code>gsir4.berror_stats.gcv.BAM.TQ0062L028</code> and <code>global_berror.l64y386.f77-ncep-dtc.gcv</code> are.</p> <p>Tip</p> <p>In the <code>data</code> directory on the the repository, check the matrices files <code>bcptec_bam_352pairs_gsir4.berror_stats.fix.oz.cw.tsm.gcv</code>, <code>global_berror.l64y386.f77-ncep-dtc.gcv</code> and <code>new_gsir4.berror_stats-tese-cfbastarz2017.gcv</code>, which can be used to test the <code>GSIBerror</code> package.</p>"},{"location":"en/usage/#using-the-berror-class","title":"Using the <code>Berror</code> class","text":"<p>To use the class, it is necessary to create instances for each of the matrices to be read:</p> Command <pre><code>ncep_b = gb.Berror(fncep)\ncptec_b = gb.Berror(fcptec)\n</code></pre>"},{"location":"en/usage/#the-read_records-method","title":"The <code>read_records</code> method","text":"<p>The <code>read_records</code> method is used to read all the records (ie., horizontal regression coefficients, vertical and horizontal lenght scales and standard deviations) from the matrices and their attributes (ie., number of latitude, longitude and vertical levels). The documentation of this method can be accessed by using the following command:</p> CommandResult <pre><code>help(gb.Berror.read_records)\n</code></pre> <pre><code>Help on function read_records in module GSIBerror:\n\nread_records(self)\n    read_records\n    ------------\n\n    This method reads the first three records of the background error covariance matrix (nlat, nlon and nsig).\n    These records are used to calculate the size of the remainder records from the matrix. All attributes read from\n    the matrix are provided by this function. The plotting of the records are made through the use of the xarray's 'plot()'\n    method; depending on the use, it can be necessary to to load the matplotlib and cartopy modules.\n\n    Par\u00e2metros de entrada\n    ---------------------\n        None.\n\n    Result\n    ------\n        bfile: object created with the records and attributes from the background error covariance matrix (see the list below)\n\n    Available attributes\n    --------------------\n        file_name         : string with the name of the file\n        nlat              : integer with the number of latitude points \n        nlon              : integer with the number of longitude points \n        nlev              : integer with the number of vertical levels\n        lats              : nd-array with the latitude values (-90 to 90)\n        lons              : nd-array with the longitude values (0 to 360)\n        levs              : nd-array with the vertical levels (1 to nsig)\n        amplitudes        : dicionary with the xarrays for the control variables amplitudes\n        amplitudes_names  : names of the variables in the amplitudes dictionary\n        balprojs          : dictionary with xarrays for the regression coefficients matrices for the temperature, \n                            surface pressure and velocity potential\n        hscales           : dictionary with xarrays for the horizontal length scales\n        hscales_var_names : names of the variables in the hscales dictionary\n        vscales           : dictionary with xarrays for the vertical length scales\n        vscales_var_names : names of the variables in the vscales dictionary\n\n    Use\n    ---\n        import gsiberror as gb\n\n        bfile = gb.Berror('arquivo_matriz_B.gcv')\n\n        bfile.read_records()\n\n        bfile.nlat, bfile.nlon, bfile.nlev\n\n        bfile.amplitudes_names\n\n        bfile.amplitudes['sf']\n\n        bfile_amp_sf = bfile.amplitudes['sf']\n\n        bfile_amp_sf.plot.contourf()    \n</code></pre> <p>To read the records and attributes from the matrices through the instances <code>ncep_b</code> and <code>cptec_b</code>:</p> Command <pre><code>ncep_b.read_records()\ncptec_b.read_records()\n</code></pre>"},{"location":"en/usage/#checking-the-matrix-attributes","title":"Checking the matrix attributes","text":"<p>The background error covariance used by GSI has some records that can be checked by through the <code>Berror</code> class.</p>"},{"location":"en/usage/#matrix-dimension","title":"Matrix dimension","text":"<p>To check the matrices attributes, just use the class instance for the desired matrix with one of the following attribute names:</p> <ul> <li><code>nlat</code>: number of latitude points;</li> <li><code>nlon</code>: number of longitude points;</li> <li><code>nlev</code>: number of vertical levels.</li> </ul> CommandResult <pre><code>ncep_b.nlat, ncep_b.nlon, ncep_b.nlev\n</code></pre> <pre><code>(386, 768, 64)\n</code></pre> <p>Doing the same for the <code>cptec_b</code> instance:</p> CommandResult <pre><code>cptec_b.nlat, cptec_b.nlon, cptec_b.nlev\n</code></pre> <pre><code>(98, 192, 28)\n</code></pre>"},{"location":"en/usage/#horizontal-regression-coefficients","title":"Horizontal regression coefficients","text":"<p>To check the matrices attributes, use the class instance for the desired matrix with one of the following attribute names:</p> <ul> <li><code>balprojs</code>: horizontal regression coefficients;</li> <li><code>amplitudes</code>: standard deviations of the GSI control variables;</li> <li><code>hscales</code>: horizontal length scales;</li> <li><code>vscales</code>: vertical length scales.</li> </ul> CommandResult <pre><code>ncep_b.balprojs\n</code></pre> <pre><code>{'agvin': &lt;xarray.DataArray 'agvin' (level: 64, latitude: 386, level_2: 64)&gt;\n array([[[ 9.1390668e-39, -1.4570713e-08, -1.4229909e-08, ...,\n           1.9885631e-07, -3.0927532e-07, -1.5866360e-07],\n         [ 1.9645067e-07,  2.0414565e-07,  2.1749047e-07, ...,\n           3.9498239e-08,  2.1559554e-08, -2.6009864e-08],\n         [ 1.9645067e-07,  2.0414565e-07,  2.1749047e-07, ...,\n           3.9498239e-08,  2.1559554e-08, -2.6009864e-08],\n         ...,\n         [-4.0456254e-07, -4.1785779e-07, -4.3682641e-07, ...,\n           4.0088888e-10, -7.6423277e-08,  3.1785959e-08],\n         [-4.0533263e-07, -4.1864789e-07, -4.3763430e-07, ...,\n           5.5518179e-10, -7.6580413e-08,  3.1765442e-08],\n         [-4.0576197e-07, -4.1908416e-07, -4.3808009e-07, ...,\n           6.3978484e-10, -7.6664413e-08,  3.1752339e-08]],\n\n        [[-4.0576197e-07, -4.1908416e-07, -4.3808009e-07, ...,\n           6.3978484e-10, -7.6664413e-08,  3.1752339e-08],\n         [ 1.9722712e-07,  2.0493923e-07,  2.1830989e-07, ...,\n           3.6942918e-08,  2.0000796e-08, -2.4325955e-08],\n         [ 1.9722712e-07,  2.0493923e-07,  2.1830989e-07, ...,\n           3.6942918e-08,  2.0000796e-08, -2.4325955e-08],\n ...\n         [-1.4934518e-08, -1.4844422e-08, -1.4163690e-08, ...,\n          -2.2026695e-07, -7.9369016e-08,  3.3956766e-07],\n         [-1.5031601e-08, -1.4944586e-08, -1.4267745e-08, ...,\n          -2.2030216e-07, -7.9460399e-08,  3.3963573e-07],\n         [-1.5084682e-08, -1.5000639e-08, -1.4326437e-08, ...,\n          -2.2031999e-07, -7.9510286e-08,  3.3967311e-07]],\n\n        [[-1.5084682e-08, -1.5000639e-08, -1.4326437e-08, ...,\n          -2.2031999e-07, -7.9510286e-08,  3.3967311e-07],\n         [ 8.5512752e-09,  8.5789829e-09,  8.2154630e-09, ...,\n           2.4457648e-07,  8.1705295e-08, -3.7984395e-07],\n         [ 8.5512752e-09,  8.5789829e-09,  8.2154630e-09, ...,\n           2.4457648e-07,  8.1705295e-08, -3.7984395e-07],\n         ...,\n         [-1.4472619e-08, -1.4127865e-08, -1.2758253e-08, ...,\n          -3.0925835e-07, -1.5847982e-07,  4.0097532e-07],\n         [-1.4536464e-08, -1.4193026e-08, -1.2824126e-08, ...,\n          -3.0927063e-07, -1.5859801e-07,  4.0104135e-07],\n         [-1.4570713e-08, -1.4229909e-08, -1.2862232e-08, ...,\n          -3.0927532e-07, -1.5866360e-07,  4.0107770e-07]]], dtype=float32)\n Coordinates:\n   * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n   * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64\n   * level_2   (level_2) int64 1 2 3 4 5 6 7 8 9 ... 56 57 58 59 60 61 62 63 64,\n 'bgvin': &lt;xarray.DataArray 'bgvin' (level: 64, latitude: 386)&gt;\n array([[ 0.31404725,  0.31404725,  0.31410804, ..., -0.3134667 ,\n         -0.31346098, -0.31346098],\n        [ 0.309024  ,  0.309024  ,  0.30907533, ..., -0.30182734,\n         -0.30181533, -0.30181533],\n        [ 0.29433075,  0.29433075,  0.29436478, ..., -0.27594185,\n         -0.27591783, -0.27591783],\n        ...,\n        [ 0.02594377,  0.02594377,  0.02594201, ...,  0.06056742,\n          0.06057847,  0.06057847],\n        [-0.03358313, -0.03358313, -0.03357612, ...,  0.05812103,\n          0.0581184 ,  0.0581184 ],\n        [-0.04917536, -0.04917536, -0.049166  , ...,  0.05161405,\n          0.0516182 ,  0.0516182 ]], dtype=float32)\n Coordinates:\n   * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n   * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64,\n 'wgvin': &lt;xarray.DataArray 'wgvin' (level: 64, latitude: 386)&gt;\n array([[-2.0349323e-07, -2.0356120e-07, -2.0368390e-07, ...,\n          2.4741092e-07,  2.4741092e-07,  0.0000000e+00],\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n        ...,\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  9.1390668e-39]], dtype=float32)\n Coordinates:\n   * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n   * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64}\n</code></pre> <p>Note that the <code>balprojs</code> records are stored in a dictionary with three keys: <code>agvin</code>, <code>bgvin</code> and <code>wgvin</code>. These are the horizontal regression coefficients used by GSI to construct the balanced part of the temperature, potential velocity and surface pressure, respectively:</p> <ul> <li><code>agvin</code>: horizontal regression coefficients for the temperature;</li> <li><code>bgvin</code>: horizontal regression coefficients for the velocity potential;</li> <li><code>wgvin</code>: horizontal regression coefficients for the surface pressure.</li> </ul> <p>Quoting the GSI manual<sup>2</sup>:</p> <p>Because of the size of the model variables, the full size of a B matrix is extremely large. It is typically on the order of \\(10^{6} \\times 10^{6}\\), which in its present form cannot be stored in any computer. This problem is simplified by using an ideal set of analysis variables for which the analysis is performed. These are generally referred to as \"analysis control variables\". The analysis control variables are selected such that the cross-correlations between these variables are minimum, which means less off-diagonal terms in B. The cross dependency among these analysis control variables is removed. The balance between analysis variables (such as mass and wind fields) are achieved with pre-computed \"regression coefficients\". Further, the forecast errors are modeled as a Gaussian distribution with pre-computed variances and \"lengthscale\" parameters for each of the analysis control variables. We will use the following sub-sections to briefly introduce how GSI processes these pre-computed background error statistics and applies them in a GSI analysis.</p> <p>These records with the horizontal regression coefficients can be accessed in the following way:</p> CommandResult <pre><code>ncep_b.balprojs['agvin']\n</code></pre> <pre><code>&lt;xarray.DataArray 'agvin' (level: 64, latitude: 386, level_2: 64)&gt;\narray([[[ 9.1390668e-39, -1.4570713e-08, -1.4229909e-08, ...,\n          1.9885631e-07, -3.0927532e-07, -1.5866360e-07],\n        [ 1.9645067e-07,  2.0414565e-07,  2.1749047e-07, ...,\n          3.9498239e-08,  2.1559554e-08, -2.6009864e-08],\n        [ 1.9645067e-07,  2.0414565e-07,  2.1749047e-07, ...,\n          3.9498239e-08,  2.1559554e-08, -2.6009864e-08],\n        ...,\n        [-4.0456254e-07, -4.1785779e-07, -4.3682641e-07, ...,\n          4.0088888e-10, -7.6423277e-08,  3.1785959e-08],\n        [-4.0533263e-07, -4.1864789e-07, -4.3763430e-07, ...,\n          5.5518179e-10, -7.6580413e-08,  3.1765442e-08],\n        [-4.0576197e-07, -4.1908416e-07, -4.3808009e-07, ...,\n          6.3978484e-10, -7.6664413e-08,  3.1752339e-08]],\n\n       [[-4.0576197e-07, -4.1908416e-07, -4.3808009e-07, ...,\n          6.3978484e-10, -7.6664413e-08,  3.1752339e-08],\n        [ 1.9722712e-07,  2.0493923e-07,  2.1830989e-07, ...,\n          3.6942918e-08,  2.0000796e-08, -2.4325955e-08],\n        [ 1.9722712e-07,  2.0493923e-07,  2.1830989e-07, ...,\n          3.6942918e-08,  2.0000796e-08, -2.4325955e-08],\n...\n        [-1.4934518e-08, -1.4844422e-08, -1.4163690e-08, ...,\n         -2.2026695e-07, -7.9369016e-08,  3.3956766e-07],\n        [-1.5031601e-08, -1.4944586e-08, -1.4267745e-08, ...,\n         -2.2030216e-07, -7.9460399e-08,  3.3963573e-07],\n        [-1.5084682e-08, -1.5000639e-08, -1.4326437e-08, ...,\n         -2.2031999e-07, -7.9510286e-08,  3.3967311e-07]],\n\n       [[-1.5084682e-08, -1.5000639e-08, -1.4326437e-08, ...,\n         -2.2031999e-07, -7.9510286e-08,  3.3967311e-07],\n        [ 8.5512752e-09,  8.5789829e-09,  8.2154630e-09, ...,\n          2.4457648e-07,  8.1705295e-08, -3.7984395e-07],\n        [ 8.5512752e-09,  8.5789829e-09,  8.2154630e-09, ...,\n          2.4457648e-07,  8.1705295e-08, -3.7984395e-07],\n        ...,\n        [-1.4472619e-08, -1.4127865e-08, -1.2758253e-08, ...,\n         -3.0925835e-07, -1.5847982e-07,  4.0097532e-07],\n        [-1.4536464e-08, -1.4193026e-08, -1.2824126e-08, ...,\n         -3.0927063e-07, -1.5859801e-07,  4.0104135e-07],\n        [-1.4570713e-08, -1.4229909e-08, -1.2862232e-08, ...,\n         -3.0927532e-07, -1.5866360e-07,  4.0107770e-07]]], dtype=float32)\nCoordinates:\n  * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n  * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64\n  * level_2   (level_2) int64 1 2 3 4 5 6 7 8 9 ... 56 57 58 59 60 61 62 63 64\n</code></pre> <p>For the <code>bgvin</code>:</p> CommandResult <pre><code>ncep_b.balprojs['bgvin']\n</code></pre> <pre><code>&lt;xarray.DataArray 'bgvin' (level: 64, latitude: 386)&gt;\narray([[ 0.31404725,  0.31404725,  0.31410804, ..., -0.3134667 ,\n        -0.31346098, -0.31346098],\n       [ 0.309024  ,  0.309024  ,  0.30907533, ..., -0.30182734,\n        -0.30181533, -0.30181533],\n       [ 0.29433075,  0.29433075,  0.29436478, ..., -0.27594185,\n        -0.27591783, -0.27591783],\n       ...,\n       [ 0.02594377,  0.02594377,  0.02594201, ...,  0.06056742,\n         0.06057847,  0.06057847],\n       [-0.03358313, -0.03358313, -0.03357612, ...,  0.05812103,\n         0.0581184 ,  0.0581184 ],\n       [-0.04917536, -0.04917536, -0.049166  , ...,  0.05161405,\n         0.0516182 ,  0.0516182 ]], dtype=float32)\nCoordinates:\n  * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n  * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64\n</code></pre> <p>For the <code>wgvin</code>:</p> CommandResult <pre><code>ncep_b.balprojs['wgvin']\n</code></pre> <pre><code>&lt;xarray.DataArray 'wgvin' (level: 64, latitude: 386)&gt;\narray([[-2.0349323e-07, -2.0356120e-07, -2.0368390e-07, ...,\n         2.4741092e-07,  2.4741092e-07,  0.0000000e+00],\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       ...,\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  9.1390668e-39]], dtype=float32)\nCoordinates:\n  * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n  * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64\n</code></pre> <p>To retrieve the min and max values, e.g., from the horizontal regression coefficients of the velocity potential (<code>bgvin</code>), use either the <code>min()</code> or <code>max()</code> methods from the <code>xarray</code> module:</p> CommandResult <pre><code>ncep_b.balprojs['bgvin'].min()\n</code></pre> <pre><code>&lt;xarray.DataArray 'bgvin' ()&gt;\narray(-0.33616406, dtype=float32)\n</code></pre> <p>And for <code>max()</code>:</p> CommandResult <pre><code>ncep_b.balprojs['bgvin'].max()\n</code></pre> <pre><code>&lt;xarray.DataArray 'bgvin' ()&gt; \narray(0.3307993, dtype=float32)\n</code></pre> <p>In a more direct way:</p> CommandResult <pre><code>ncep_b.balprojs['bgvin'].values.min(), ncep_b.balprojs['bgvin'].values.max()\n</code></pre> <pre><code>(-0.33616406, 0.3307993)\n</code></pre> <p>To plot the horizontal regression coefficients for the velocity potential <code>bgvin</code>, just use the <code>plot()</code> method from the <code>xarray</code> module:</p> CommandResult <pre><code>ncep_b.balprojs['bgvin'].plot()\n</code></pre> <p></p> <p>For the <code>cptec_b</code> instance:</p> CommandResult <pre><code>cptec_b.balprojs['bgvin'].plot()\n</code></pre> <p></p> <p>To compare the horizontal regression coefficients for the instantiated matrices <code>ncep_b</code> and <code>cptec_b</code>, see the next examples.</p> <p>Note that the horizontal regression coefficients for the temperature <code>agvin</code> have an extra dimension named <code>level_2</code>. This extra dimension needs to be set for one of the levels contained in the instances. Use the attribute <code>levs</code> to retrieve the possible values for each instance. By using <code>isel(level_2=0)</code>, the first level, next to the surface, is chosen, and by using <code>isel(level_2=-1)</code>, the last level, next to the model top, is chosen.</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.balprojs['agvin'].isel(level_2=0).plot.contourf(ax=ax[0])#, vmin=0, vmax=5e-7)\ncptec_b.balprojs['agvin'].isel(level_2=0).plot.contourf(ax=ax[1])#, vmin=0, vmax=5e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Projection of the Stream Function ($\\psi$) at the level 0 over the balanced part of Temperature (agvin, level_2=0)')\nplt.show()\n</code></pre> <p></p> <p>And for the last level, for both matrices:</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.balprojs['agvin'].isel(level_2=-1).plot.contourf(ax=ax[0])#, vmin=0, vmax=5e-7)\ncptec_b.balprojs['agvin'].isel(level_2=-1).plot.contourf(ax=ax[1])#, vmin=0, vmax=5e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Projection of the Stream Function ($\\psi$) at the level -1 over the balanced part of Temperature (agvin, level_2=-1)')\nplt.show()\n</code></pre> <p></p> <p>For the <code>bgvin</code> record:</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.balprojs['bgvin'].plot.contourf(ax=ax[0])#, vmin=0, vmax=0.5)\ncptec_b.balprojs['bgvin'].plot.contourf(ax=ax[1])#, vmin=0, vmax=0.5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Projection of the Stream Function ($\\psi$) over the balanced part of Potential Velocity (bgvin)')\nplt.show()\n</code></pre> <p></p> <p>For the <code>wgvin</code> record:</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.balprojs['wgvin'].plot.contourf(ax=ax[0])#, vmin=-3e-7, vmax=3e-7)\ncptec_b.balprojs['wgvin'].plot.contourf(ax=ax[1])#, vmin=-3e-7, vmax=3e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Projection of the Stream Function ($\\psi$) over the balanced part of Surface Pressure (wgvin)')\nplt.show()\n</code></pre> <p></p>"},{"location":"en/usage/#amplitudes-standard-deviations","title":"Amplitudes (standard deviations)","text":"<p>To check and compare the amplitudes from the instances <code>ncep_b</code> and <code>cptec_b</code>, see the next examples.</p> <p>Warning</p> <p>The records of ozone, cloud water and sea surface temperature (amplitudes and horizontal/vertical length scales) are intentionally the same for both matrices displayed in this notebook. In fact, the CPTEC B matrix borrows these records from the NCEP B matrix (provides by the Developmental Testbed Center - DTC) for testing purposes.</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['sf'].plot.contourf(ax=ax[0])#, vmin=0, vmax=6e6)\ncptec_b.amplitudes['sf'].plot.contourf(ax=ax[1])#, vmin=0, vmax=6e6)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of the unbalanced part of Stream Function (sf)')\nplt.show()\n</code></pre> <p></p> <p>In the following example, vertical profiles from the amplitudes of the streamfunction <code>sf</code> from the instances <code>ncep_b</code> and <code>cptec_b</code> are compared:</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['sf'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['sf'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of the unbalanced part of Stream Function (sf)')\nplt.show()\n</code></pre> <p></p> <p>For the velocity potential (<code>vp</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['vp'].plot.contourf(ax=ax[0])#, vmin=0, vmax=6e6)\ncptec_b.amplitudes['vp'].plot.contourf(ax=ax[1])#, vmin=0, vmax=6e6)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of the unbalanced part of Velocity Potential Function (vp)')\nplt.show()\n</code></pre> <p></p> <p>For the vertical profile of the velocity potential (<code>vp</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['vp'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['vp'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of the unbalanced part of Velocity Potential (vp)')\nplt.show()\n</code></pre> <p></p> <p>For the temperature (<code>t</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['t'].plot.contourf(ax=ax[0])#, vmin=0, vmax=5)\ncptec_b.amplitudes['t'].plot.contourf(ax=ax[1])#, vmin=0, vmax=5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of the unbalanced part of Temperature (t)')\nplt.show()\n</code></pre> <p></p> <p>For the vertical profile of the temperature (<code>t</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['t'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['t'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of the unbalanced part of Temperature (t)')\nplt.show()\n</code></pre> <p></p> <p>For the relative humidity (<code>q</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['q'].plot.contourf(ax=ax[0])#, vmin=0, vmax=0.5)\ncptec_b.amplitudes['q'].plot.contourf(ax=ax[1])#, vmin=0, vmax=0.5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of Relative Humidity (q)')\nplt.show()\n</code></pre> <p></p> <p>For the vertical profile of the relative humidity (<code>q</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['q'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['q'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of Relative Humidity (q)')\nplt.show()\n</code></pre> <p></p> <p>For the ozone (<code>oz</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['oz'].plot.contourf(ax=ax[0])#, vmin=0, vmax=7.5e-7)\ncptec_b.amplitudes['oz'].plot.contourf(ax=ax[1])#, vmin=0, vmax=7.5e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of Ozone (oz)')\nplt.show()\n</code></pre> <p></p> <p>For the vertical profile of the ozone (<code>oz</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['oz'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['oz'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of Ozone (oz)')\nplt.show()\n</code></pre> <p></p> <p>For the cloud water content (<code>cw</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['cw'].plot.contourf(ax=ax[0])#, vmin=0, vmax=7.5e-7)\ncptec_b.amplitudes['cw'].plot.contourf(ax=ax[1])#, vmin=0, vmax=7.5e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of Cloud Water (cw)')\nplt.show()\n</code></pre> <p></p> <p>For the vertical profile of the cloud water content (<code>cw</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['cw'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['cw'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of Cloud Water (cw)')\nplt.show()\n</code></pre> <p></p> <p>For the surface pressure (<code>ps</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['ps'].plot(ax=ax[0])#, vmin=0, vmax=0.2)\ncptec_b.amplitudes['ps'].plot(ax=ax[1])#, vmin=0, vmax=0.2)\n\nax[0].set_title('NCEP')\nax[1].set_title('CPTEC')\n\nplt.suptitle('Standard Deviation of Surface Pressure (ps)')\nplt.show()\n</code></pre> <p></p> <p>In the next figures, the amplitudes of the sea surface temperature (<code>sst</code>) for the instances <code>ncep_b</code> and <code>cptec_b</code> are shown.</p> CommandResult <pre><code>plt.figure(figsize=(20,4))#, constrained_layout=True)\n\nax1 = plt.subplot(1, 2, 1, projection=ccrs.PlateCarree())\nax1.add_feature(cfeature.NaturalEarthFeature('physical', 'land', '110m', edgecolor='face', facecolor='white'))\nobj1 = ax1.contourf(ncep_b.lons, ncep_b.lats, ncep_b.amplitudes['sst'], 60, transform=ccrs.PlateCarree())\nplt.colorbar(obj1)\nax1.coastlines()\n\nax2 = plt.subplot(1, 2, 2, projection=ccrs.PlateCarree())\nax2.add_feature(cfeature.NaturalEarthFeature('physical', 'land', '110m', edgecolor='face', facecolor='white'))\nobj2 = ax2.contourf(cptec_b.lons, cptec_b.lats, cptec_b.amplitudes['sst'], 60, transform=ccrs.PlateCarree())\nplt.colorbar(obj2)\nax2.coastlines()\n\nax1.set_title('NCEP')\nax2.set_title('CPTEC')\n\nplt.suptitle('Standard Deviation of Sea Surface Temperature (sst)')\nplt.show()\n</code></pre> <p></p>"},{"location":"en/usage/#horizontal-length-scales","title":"Horizontal length scales","text":"<p>In the same manner we did for the amplitudes, the horizontal length scales from the instances <code>ncep_b</code> and <code>cptec_b</code> can also be compared. See the next examples.</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['sf'].plot.contourf(ax=ax[0])#, vmin=0, vmax=1.5e6)\ncptec_b.hscales['sf'].plot.contourf(ax=ax[1])#, vmin=0, vmax=1.5e6)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Stream Function (sf)')\nplt.show()\n</code></pre> <p></p> <p>For the velocity potential (<code>vp</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['vp'].plot.contourf(ax=ax[0])#, vmin=0, vmax=1.5e6)\ncptec_b.hscales['vp'].plot.contourf(ax=ax[1])#, vmin=0, vmax=1.5e6)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Velocity Potential (vp)')\nplt.show()\n</code></pre> <p></p> <p>For the temperature (<code>t</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['t'].plot.contourf(ax=ax[0])#, vmin=0, vmax=3.5e5)\ncptec_b.hscales['t'].plot.contourf(ax=ax[1])#, vmin=0, vmax=3.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Temperature (t)')\nplt.show()\n</code></pre> <p></p> <p>For the relative humidity (<code>q</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['q'].plot.contourf(ax=ax[0])#, vmin=0, vmax=1.5e5)\ncptec_b.hscales['q'].plot.contourf(ax=ax[1])#, vmin=0, vmax=1.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Relative Humidity (q)')\nplt.show()\n</code></pre> <p></p> <p>For the ozone (<code>oz</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['oz'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.hscales['oz'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Ozone (oz)')\nplt.show()\n</code></pre> <p></p> <p>For the surface pressure (<code>ps</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['ps'].plot(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.hscales['ps'].plot(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Surface Pressure (ps)')\nplt.show()\n</code></pre> <p></p> <p>For the sea surface temperature (<code>sst</code>):</p> CommandResult <pre><code>plt.figure(figsize=(20,4))#, constrained_layout=True)\n\nax1 = plt.subplot(1, 2, 1, projection=ccrs.PlateCarree())\nax1.add_feature(cfeature.NaturalEarthFeature('physical', 'land', '110m', edgecolor='face', facecolor='white'))\nobj1 = ax1.contourf(ncep_b.lons, ncep_b.lats, ncep_b.hscales['sst'], 60, transform=ccrs.PlateCarree())\nplt.colorbar(obj1)\nax1.coastlines()\n\nax2 = plt.subplot(1, 2, 2, projection=ccrs.PlateCarree())\nax2.add_feature(cfeature.NaturalEarthFeature('physical', 'land', '110m', edgecolor='face', facecolor='white'))\nobj2 = ax2.contourf(cptec_b.lons, cptec_b.lats, cptec_b.hscales['sst'], 60, transform=ccrs.PlateCarree())\nplt.colorbar(obj2)\nax2.coastlines()\n\nax1.set_title('NCEP')\nax2.set_title('CPTEC')\n\nplt.suptitle('Horizontal Length Scale of Sea Surface Temperature (ps)')\nplt.show()\n</code></pre> <p></p>"},{"location":"en/usage/#vertical-length-scales","title":"Vertical length scales","text":"<p>In the same manner we did for the amplitudes, the vertical length scales from the instances <code>ncep_b</code> and <code>cptec_b</code> can also be compared. See the next examples.</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['sf'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['sf'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Stream Function (sf)')\nplt.show()\n</code></pre> <p></p> <p>For the velocity potential (<code>vp</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['vp'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['vp'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Velocity Potential (vp)')\nplt.show()\n</code></pre> <p></p> <p>For the temperature (<code>t</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['t'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['t'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Temperature (t)')\nplt.show()\n</code></pre> <p></p> <p>For the relative humidity (<code>q</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['q'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['q'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Relative Humidity (q)')\nplt.show()\n</code></pre> <p></p> <p>For the ozone (<code>oz</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['oz'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['oz'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Ozone (oz)')\nplt.show()\n</code></pre> <p></p> <p>For the cloud water content (<code>cw</code>):</p> CommandResult <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['cw'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['cw'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Cloud Water (cw)')\nplt.show()\n</code></pre> <p></p> <ol> <li> <p>Matriz de Covari\u00e2ncias dos Erros de Previs\u00e3o Aplicada ao Sistema de Assimila\u00e7\u00e3o de Dados Global do CPTEC: Experimentos com Observa\u00e7\u00e3o \u00danica. Dispon\u00edvel em: https://www.scielo.br/j/rbmet/a/8LQNdCV9jJM9whJdpkDLfCh/abstract/?lang=pt&amp;format=html.\u00a0\u21a9</p> </li> <li> <p>Available at https://dtcenter.org/community-code/gridpoint-statistical-interpolation-gsi/documentation.\u00a0\u21a9</p> </li> </ol>"},{"location":"pt/","title":"GSIBerror","text":""},{"location":"pt/#gsiberror","title":"GSIBerror","text":"<p>O pacote <code>GSIBerror</code> foi concebido para a leitura dos records e atributos de matrizes de covari\u00e2ncias dos erros de previs\u00e3o compat\u00edveis com o Gridpoint Statistical Interpolation (formato <code>.gcv</code>, grade global).</p> <p>Veja o video abaixo para ter uma vis\u00e3o geral do uso do pacote. Voc\u00ea pode tamb\u00e9m utilizar a plataforma do Google Colab para explorar os notebooks do Jupyter no reposit\u00f3rio.</p> <p></p> <p></p>"},{"location":"pt/instalacao/","title":"Instala\u00e7\u00e3o","text":""},{"location":"pt/instalacao/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>A instala\u00e7\u00e3o do pacote <code>GSIBerror</code> pode ser feita a partir <code>pip</code> ou atrav\u00e9s do pr\u00f3prio reposit\u00f3rio. Nesta p\u00e1gina, s\u00e3o apresentados estes m\u00e9todos de instala\u00e7\u00e3o para que o usu\u00e1rio escolha o m\u00e9todo que melhor lhe convier.</p> <p>Aten\u00e7\u00e3o</p> <p>Antes de iniciar a instala\u00e7\u00e3o do pacote <code>GSIBerror</code>, certifique-se de ter uma distribui\u00e7\u00e3o do Python instalada na sua m\u00e1quina. Para facilitar o processo recomenda-se a instala\u00e7\u00e3o do Miniconda. </p>"},{"location":"pt/instalacao/#pip","title":"Pip","text":"<p>Para instalar utilizando a distribui\u00e7\u00e3o do pacote <code>GSIBerror</code>, crie primeiro um ambiente virtual com o <code>venv</code> e instale o pacote utilizando o <code>pip</code>:</p> <pre><code>python -m venv GSIBerror\nsource GSIBerror/bin/activate\npip install GSIBerror\n</code></pre> <p>\u00c9 poss\u00edvel utilizar tamb\u00e9m o <code>conda</code> para a utiliza\u00e7\u00e3o do pacote <code>GSIBerror</code>. Da mesma forma como foi demonstrado com o <code>venv</code>, crie um ambiente com o <code>conda</code> e instale o pacote <code>GSIBerror</code> utilizando o <code>pip</code>: </p> <pre><code>conda create -n GSIBerror python=3.9.18\nconda activate GSIBerror\npip install GSIBerror\n</code></pre> <p>Nota</p> <p>Ao criar um ambiente com o <code>conda</code>, \u00e9 necess\u00e1rio indicar a vers\u00e3o do Python a ser utilizada, assim como foi mostrado acima. Isso \u00e9 necess\u00e1rio para que o pacote <code>GSIBerror</code> possa ser utilizado junto com as suas depend\u00eancias b\u00e1sicas (i.e., <code>xarray</code>, <code>numpy</code>, <code>cartopy</code> e <code>matplotlib</code>). Ao criar um ambiente virtual com o <code>venv</code>, o <code>python</code> e o <code>pip</code> s\u00e3o automaticamente instalados.</p>"},{"location":"pt/instalacao/#repositorio","title":"Reposit\u00f3rio","text":"<p>No reposit\u00f3rio do projeto, h\u00e1 o arquivo <code>environment.yml</code> que pode ser utilizado para criar um ambiente com o pacote <code>GSIBerror</code> junto com todas as bibliotecas do Python necess\u00e1rias para a sua utiliza\u00e7\u00e3o.</p> <p>Para criar o ambiente Python para uso do pacote <code>GSIBerror</code> utilizando o <code>conda</code> e o arquivo <code>environment.yml</code>, baixe uma c\u00f3pia do reposit\u00f3rio e execute os comandos:</p> <pre><code>gh repo clone GAD-DIMNT-CPTEC/GSIBerror\ncd GSIBerror\nconda env create -f environment.yml\n</code></pre> <p>Ap\u00f3s a cria\u00e7\u00e3o do ambiente, basta ativ\u00e1-lo com o comando:</p> <pre><code>conda activate GSIBerror\n</code></pre> <p>Dica</p> <p>Quando o usu\u00e1rio desejar contrubuir com o desenvolvimento do pacote <code>GSIBerror</code>, recomenda-se a utiliza\u00e7\u00e3o do c\u00f3digo do reposit\u00f3rio.</p> <p>Com a instala\u00e7\u00e3o do pacote <code>GSIBerror</code>, explore tamb\u00e9m os notebooks dispon\u00edveis no reposit\u00f3rio com exemplos de uso.</p>"},{"location":"pt/uso/","title":"Uso","text":""},{"location":"pt/uso/#uso","title":"Uso","text":"<p>Nesta p\u00e1gina s\u00e3o apresentados alguns exemplos de uso do pacote <code>GSIBerror</code>. Nos exemplos, s\u00e3o consideradas duas matrizes de covari\u00e2ncias, uma proveniente do Developmental Testbed Center (DTC) e outra calculada a partir dos pares de previs\u00f5es do modelo de circula\u00e7\u00e3o geral da atmosfera do CPTEC<sup>1</sup>.</p> <p>Informa\u00e7\u00e3o</p> <p>Uma vers\u00e3o desta p\u00e1gina para o Jupyter Notebook pode ser encontrada em https://github.com/GAD-DIMNT-CPTEC/GSIBerror/blob/main/notebooks/read_gsi_berror_python-class-final-pt.ipynb. </p> <p>Se preferir interagir com o notebook, clique no bot\u00e3o abaixo para utilizar o Google Colab.</p> <p> </p>"},{"location":"pt/uso/#a-classe-berror","title":"A classe <code>Berror</code>","text":"<p>Para utilizar a classe <code>Berror</code>, carregue o pacote <code>gsiberror</code> com o comando a seguir:</p> Comando <pre><code>import gsiberror as gb\n</code></pre> <p>Os m\u00f3dulos a seguir s\u00e3o opcionais e podem ser carregados caso o usu\u00e1rio queira plotar os records da matriz. O m\u00f3dulo <code>cartopy</code> \u00e9 carregado para plotar as linhas de costa dos records relacionados com a <code>sst</code> (temperatura da superf\u00edcie do mar) apenas, visto que os demais records, s\u00e3o dependentes apenas das latitudes:</p> Comando <pre><code>import os\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n</code></pre> <p>Observa\u00e7\u00e3o</p> <p>No reposit\u00f3rio, h\u00e1 o script <code>plot_functions.py</code> onde est\u00e3o implementadas algumas fun\u00e7\u00f5es de plotagem auxiliares para a utiliza\u00e7\u00e3o com a classe <code>Berror</code>. Veja um exemplo da sua utiliza\u00e7\u00e3o no notebook <code>read_gsi_berror_python-class-final-BCPTEC_hyb_coord.ipynb</code>. </p>"},{"location":"pt/uso/#definicao-dos-arquivos-de-covariancias","title":"Defini\u00e7\u00e3o dos arquivos de covari\u00e2ncias","text":"<p>A seguir, define-se o nome do arquivo a ser lido. No exemplo dado, s\u00e3o consideradas duas matrizes, <code>fncep</code> (matriz do NCEP) e <code>fcptec</code> (matriz do modelo BAM) e ambas as matrizes possuem dimens\u00f5es distintas:</p> Comando <pre><code>path = '/dados/das/pesq1/BAM.berror/xc50/'\n\nbcptec = 'gsir4.berror_stats.gcv.BAM.TQ0062L028'\nbncep = 'global_berror.l64y386.f77-ncep-dtc.gcv'\n\nfncep = os.path.join(path, bncep)\nfcptec = os.path.join(path, bcptec)\n</code></pre> <p>Aviso</p> <p>A vari\u00e1vel <code>path</code> dever\u00e1 ser ajustada pelo usu\u00e1rio para refletir o caminho onde se encontram os arquivos das matrizes <code>gsir4.berror_stats.gcv.BAM.TQ0062L028</code> e <code>global_berror.l64y386.f77-ncep-dtc.gcv</code>.</p> <p>Dica</p> <p>No diret\u00f3rio <code>data</code> do reposit\u00f3rio, verifique as matrizes <code>bcptec_bam_352pairs_gsir4.berror_stats.fix.oz.cw.tsm.gcv</code>, <code>global_berror.l64y386.f77-ncep-dtc.gcv</code> e <code>new_gsir4.berror_stats-tese-cfbastarz2017.gcv</code>, as quais podem ser utilizadas para testar o pacote <code>GSIBerror</code>.</p>"},{"location":"pt/uso/#utilizacao-da-classe-berror","title":"Utiliza\u00e7\u00e3o da classe <code>Berror</code>","text":"<p>Para utilizar a classe, \u00e9 necess\u00e1rio criar uma inst\u00e2ncia para cada uma das matrizes a serem lidas:</p> Comando <pre><code>ncep_b = gb.Berror(fncep)\ncptec_b = gb.Berror(fcptec)\n</code></pre>"},{"location":"pt/uso/#o-metodo-read_records","title":"O m\u00e9todo <code>read_records</code>","text":"<p>O m\u00e9todo <code>read_records</code> \u00e9 utilizado para ler todos os records (coeficientes de regress\u00e3o horizontais, comprimentos de escala e vari\u00e2ncias) das matrizes e os seus respectivos atributos (n\u00famero de pontos de latitude, longitude, n\u00edveis verticais) . A documenta\u00e7\u00e3o deste m\u00e9todo pode ser acessada com o comando:</p> ComandoResultado <pre><code>help(gb.Berror.read_records)\n</code></pre> <pre><code>Help on function read_records in module GSIBerror:\n\nread_records(self)\n    read_records\n    ------------\n\n    This method reads the first three records of the background error covariance matrix (nlat, nlon and nsig).\n    These records are used to calculate the size of the remainder records from the matrix. All attributes read from\n    the matrix are provided by this function. The plotting of the records are made through the use of the xarray's 'plot()'\n    method; depending on the use, it can be necessary to to load the matplotlib and cartopy modules.\n\n    Input parameters\n    ----------------\n        None.\n\n    Result\n    ------\n        bfile: object created with the records and attributes from the background error covariance matrix (see the list below)\n\n    Available attributes\n    --------------------\n        file_name         : string with the name of the file\n        nlat              : integer with the number of latitude points \n        nlon              : integer with the number of longitude points \n        nlev              : integer with the number of vertical levels\n        lats              : nd-array with the latitude values (-90 to 90)\n        lons              : nd-array with the longitude values (0 to 360)\n        levs              : nd-array with the vertical levels (1 to nsig)\n        amplitudes        : dicionary with the xarrays for the control variables amplitudes\n        amplitudes_names  : names of the variables in the amplitudes dictionary\n        balprojs          : dictionary with xarrays for the regression coefficients matrices for the temperature, \n                            surface pressure and velocity potential\n        hscales           : dictionary with xarrays for the horizontal length scales\n        hscales_var_names : names of the variables in the hscales dictionary\n        vscales           : dictionary with xarrays for the vertical length scales\n        vscales_var_names : names of the variables in the vscales dictionary\n\n    Use\n    ---\n        import gsiberror as gb\n\n        bfile = gb.Berror('arquivo_matriz_B.gcv')\n\n        bfile.read_records()\n\n        bfile.nlat, bfile.nlon, bfile.nlev\n\n        bfile.amplitudes_names\n\n        bfile.amplitudes['sf']\n\n        bfile_amp_sf = bfile.amplitudes['sf']\n\n        bfile_amp_sf.plot.contourf()    \n</code></pre> <p>Leituras dos records e atributos das matrizes a partir das inst\u00e2ncias <code>ncep_b</code> e <code>cptec_b</code> criadas:</p> Comando <pre><code>ncep_b.read_records()\ncptec_b.read_records()\n</code></pre>"},{"location":"pt/uso/#verificacao-dos-atributos-das-matrizes","title":"Verifica\u00e7\u00e3o dos atributos das matrizes","text":"<p>A matriz de covari\u00e2ncias utilizada pelo GSI possui uma s\u00e9rie de records que podem ser verificados por meio da classe <code>Berror</code>.</p>"},{"location":"pt/uso/#dimensoes-das-matrizes","title":"Dimens\u00f5es das matrizes","text":"<p>Para verificar os atributos das matrizes, basta utilizar a inst\u00e2ncia da classe para a matriz desejada:</p> <ul> <li><code>nlat</code>: n\u00famero de pontos de latitude;</li> <li><code>nlon</code>: n\u00famero de pontos de longitude;</li> <li><code>nlev</code>: n\u00famero de n\u00edveis verticais.</li> </ul> ComandoResultado <pre><code>ncep_b.nlat, ncep_b.nlon, ncep_b.nlev\n</code></pre> <pre><code>(386, 768, 64)\n</code></pre> <p>Da mesma forma, para <code>cptec_b</code>:</p> ComandoResultado <pre><code>cptec_b.nlat, cptec_b.nlon, cptec_b.nlev\n</code></pre> <pre><code>(98, 192, 28)\n</code></pre>"},{"location":"pt/uso/#coeficientes-de-regressao-horizontais","title":"Coeficientes de regress\u00e3o horizontais","text":"<p>Para verificar os records das matrizes, basta utilizar a inst\u00e2ncia da classe para a matriz desejada:</p> <ul> <li><code>balprojs</code>: coeficientes de regress\u00e3o horizontais;</li> <li><code>amplitudes</code>: vari\u00e2ncias das vari\u00e1veis de controle;</li> <li><code>hscales</code>: comprimentos de escala horizontais;</li> <li><code>vscales</code>: comprimentos de escala verticais.</li> </ul> ComandoResultado <pre><code>ncep_b.balprojs\n</code></pre> <pre><code>{'agvin': &lt;xarray.DataArray 'agvin' (level: 64, latitude: 386, level_2: 64)&gt;\n array([[[ 9.1390668e-39, -1.4570713e-08, -1.4229909e-08, ...,\n           1.9885631e-07, -3.0927532e-07, -1.5866360e-07],\n         [ 1.9645067e-07,  2.0414565e-07,  2.1749047e-07, ...,\n           3.9498239e-08,  2.1559554e-08, -2.6009864e-08],\n         [ 1.9645067e-07,  2.0414565e-07,  2.1749047e-07, ...,\n           3.9498239e-08,  2.1559554e-08, -2.6009864e-08],\n         ...,\n         [-4.0456254e-07, -4.1785779e-07, -4.3682641e-07, ...,\n           4.0088888e-10, -7.6423277e-08,  3.1785959e-08],\n         [-4.0533263e-07, -4.1864789e-07, -4.3763430e-07, ...,\n           5.5518179e-10, -7.6580413e-08,  3.1765442e-08],\n         [-4.0576197e-07, -4.1908416e-07, -4.3808009e-07, ...,\n           6.3978484e-10, -7.6664413e-08,  3.1752339e-08]],\n\n        [[-4.0576197e-07, -4.1908416e-07, -4.3808009e-07, ...,\n           6.3978484e-10, -7.6664413e-08,  3.1752339e-08],\n         [ 1.9722712e-07,  2.0493923e-07,  2.1830989e-07, ...,\n           3.6942918e-08,  2.0000796e-08, -2.4325955e-08],\n         [ 1.9722712e-07,  2.0493923e-07,  2.1830989e-07, ...,\n           3.6942918e-08,  2.0000796e-08, -2.4325955e-08],\n ...\n         [-1.4934518e-08, -1.4844422e-08, -1.4163690e-08, ...,\n          -2.2026695e-07, -7.9369016e-08,  3.3956766e-07],\n         [-1.5031601e-08, -1.4944586e-08, -1.4267745e-08, ...,\n          -2.2030216e-07, -7.9460399e-08,  3.3963573e-07],\n         [-1.5084682e-08, -1.5000639e-08, -1.4326437e-08, ...,\n          -2.2031999e-07, -7.9510286e-08,  3.3967311e-07]],\n\n        [[-1.5084682e-08, -1.5000639e-08, -1.4326437e-08, ...,\n          -2.2031999e-07, -7.9510286e-08,  3.3967311e-07],\n         [ 8.5512752e-09,  8.5789829e-09,  8.2154630e-09, ...,\n           2.4457648e-07,  8.1705295e-08, -3.7984395e-07],\n         [ 8.5512752e-09,  8.5789829e-09,  8.2154630e-09, ...,\n           2.4457648e-07,  8.1705295e-08, -3.7984395e-07],\n         ...,\n         [-1.4472619e-08, -1.4127865e-08, -1.2758253e-08, ...,\n          -3.0925835e-07, -1.5847982e-07,  4.0097532e-07],\n         [-1.4536464e-08, -1.4193026e-08, -1.2824126e-08, ...,\n          -3.0927063e-07, -1.5859801e-07,  4.0104135e-07],\n         [-1.4570713e-08, -1.4229909e-08, -1.2862232e-08, ...,\n          -3.0927532e-07, -1.5866360e-07,  4.0107770e-07]]], dtype=float32)\n Coordinates:\n   * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n   * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64\n   * level_2   (level_2) int64 1 2 3 4 5 6 7 8 9 ... 56 57 58 59 60 61 62 63 64,\n 'bgvin': &lt;xarray.DataArray 'bgvin' (level: 64, latitude: 386)&gt;\n array([[ 0.31404725,  0.31404725,  0.31410804, ..., -0.3134667 ,\n         -0.31346098, -0.31346098],\n        [ 0.309024  ,  0.309024  ,  0.30907533, ..., -0.30182734,\n         -0.30181533, -0.30181533],\n        [ 0.29433075,  0.29433075,  0.29436478, ..., -0.27594185,\n         -0.27591783, -0.27591783],\n        ...,\n        [ 0.02594377,  0.02594377,  0.02594201, ...,  0.06056742,\n          0.06057847,  0.06057847],\n        [-0.03358313, -0.03358313, -0.03357612, ...,  0.05812103,\n          0.0581184 ,  0.0581184 ],\n        [-0.04917536, -0.04917536, -0.049166  , ...,  0.05161405,\n          0.0516182 ,  0.0516182 ]], dtype=float32)\n Coordinates:\n   * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n   * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64,\n 'wgvin': &lt;xarray.DataArray 'wgvin' (level: 64, latitude: 386)&gt;\n array([[-2.0349323e-07, -2.0356120e-07, -2.0368390e-07, ...,\n          2.4741092e-07,  2.4741092e-07,  0.0000000e+00],\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n        ...,\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n        [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n          0.0000000e+00,  0.0000000e+00,  9.1390668e-39]], dtype=float32)\n Coordinates:\n   * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n   * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64}\n</code></pre> <p>Observe que os records de <code>balprojs</code> est\u00e3o armazenados em um dicion\u00e1rio com tr\u00eas elementos <code>agvin</code>, <code>bgvin</code> e <code>wgvin</code>. Estes s\u00e3o os coeficientes de regress\u00e3o horizontais do GSI, utilizados para construir a parte balanceada da temperatura, velocidade potencial e press\u00e3o em superf\u00edcie:</p> <ul> <li><code>agvin</code>: coeficientes de regress\u00e3o para a fun\u00e7\u00e3o de corrente e temperatura;</li> <li><code>bgvin</code>: coeficientes de regress\u00e3o para a fun\u00e7\u00e3o de corrente e velocidade potencial;</li> <li><code>wgvin</code>: coeficientes de regress\u00e3o para a fun\u00e7\u00e3o de corrente e press\u00e3o em superf\u00edcie.</li> </ul> <p>Segundo o manual do GSI<sup>2</sup>:</p> <p>Devido ao tamanho real da matriz de covari\u00e2ncias (da ordem de \\(10^6 \\times 10^6\\)), a representa\u00e7\u00e3o da matriz no GSI \u00e9 simplificada. Para isso, \u00e9 utilizado um conjunto ideal de vari\u00e1veis de controle de an\u00e1lise, que s\u00e3o selecionadas de forma que a correla\u00e7\u00e3o cruzada entre elas seja m\u00ednima (o que implica em menos termos fora da diagonal principal da matriz). Com isso, o balan\u00e7o (e.g., massa e vento) entre as vari\u00e1veis de an\u00e1lise \u00e9 obtido a partir desses coeficientes de regress\u00e3o horizontais pr\u00e9-calculados. Al\u00e9m disso, em rela\u00e7\u00e3o aos erros de previs\u00e3o, eles s\u00e3o calculados como distribui\u00e7\u00f5es Gaussianas com vari\u00e2ncias e comprimentos de escala pr\u00e9-calculados (offline) para cada uma das vari\u00e1veis de controle de an\u00e1lise.</p> <p>Estes records com os coeficientes de regress\u00e3o podem ser inspecionados da seguinte forma:</p> ComandoResultado <pre><code>ncep_b.balprojs['agvin']\n</code></pre> <pre><code>&lt;xarray.DataArray 'agvin' (level: 64, latitude: 386, level_2: 64)&gt;\narray([[[ 9.1390668e-39, -1.4570713e-08, -1.4229909e-08, ...,\n          1.9885631e-07, -3.0927532e-07, -1.5866360e-07],\n        [ 1.9645067e-07,  2.0414565e-07,  2.1749047e-07, ...,\n          3.9498239e-08,  2.1559554e-08, -2.6009864e-08],\n        [ 1.9645067e-07,  2.0414565e-07,  2.1749047e-07, ...,\n          3.9498239e-08,  2.1559554e-08, -2.6009864e-08],\n        ...,\n        [-4.0456254e-07, -4.1785779e-07, -4.3682641e-07, ...,\n          4.0088888e-10, -7.6423277e-08,  3.1785959e-08],\n        [-4.0533263e-07, -4.1864789e-07, -4.3763430e-07, ...,\n          5.5518179e-10, -7.6580413e-08,  3.1765442e-08],\n        [-4.0576197e-07, -4.1908416e-07, -4.3808009e-07, ...,\n          6.3978484e-10, -7.6664413e-08,  3.1752339e-08]],\n\n       [[-4.0576197e-07, -4.1908416e-07, -4.3808009e-07, ...,\n          6.3978484e-10, -7.6664413e-08,  3.1752339e-08],\n        [ 1.9722712e-07,  2.0493923e-07,  2.1830989e-07, ...,\n          3.6942918e-08,  2.0000796e-08, -2.4325955e-08],\n        [ 1.9722712e-07,  2.0493923e-07,  2.1830989e-07, ...,\n          3.6942918e-08,  2.0000796e-08, -2.4325955e-08],\n...\n        [-1.4934518e-08, -1.4844422e-08, -1.4163690e-08, ...,\n         -2.2026695e-07, -7.9369016e-08,  3.3956766e-07],\n        [-1.5031601e-08, -1.4944586e-08, -1.4267745e-08, ...,\n         -2.2030216e-07, -7.9460399e-08,  3.3963573e-07],\n        [-1.5084682e-08, -1.5000639e-08, -1.4326437e-08, ...,\n         -2.2031999e-07, -7.9510286e-08,  3.3967311e-07]],\n\n       [[-1.5084682e-08, -1.5000639e-08, -1.4326437e-08, ...,\n         -2.2031999e-07, -7.9510286e-08,  3.3967311e-07],\n        [ 8.5512752e-09,  8.5789829e-09,  8.2154630e-09, ...,\n          2.4457648e-07,  8.1705295e-08, -3.7984395e-07],\n        [ 8.5512752e-09,  8.5789829e-09,  8.2154630e-09, ...,\n          2.4457648e-07,  8.1705295e-08, -3.7984395e-07],\n        ...,\n        [-1.4472619e-08, -1.4127865e-08, -1.2758253e-08, ...,\n         -3.0925835e-07, -1.5847982e-07,  4.0097532e-07],\n        [-1.4536464e-08, -1.4193026e-08, -1.2824126e-08, ...,\n         -3.0927063e-07, -1.5859801e-07,  4.0104135e-07],\n        [-1.4570713e-08, -1.4229909e-08, -1.2862232e-08, ...,\n         -3.0927532e-07, -1.5866360e-07,  4.0107770e-07]]], dtype=float32)\nCoordinates:\n  * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n  * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64\n  * level_2   (level_2) int64 1 2 3 4 5 6 7 8 9 ... 56 57 58 59 60 61 62 63 64\n</code></pre> <p>Para <code>bgvin</code>:</p> ComandoResultado <pre><code>ncep_b.balprojs['bgvin']\n</code></pre> <pre><code>&lt;xarray.DataArray 'bgvin' (level: 64, latitude: 386)&gt;\narray([[ 0.31404725,  0.31404725,  0.31410804, ..., -0.3134667 ,\n        -0.31346098, -0.31346098],\n       [ 0.309024  ,  0.309024  ,  0.30907533, ..., -0.30182734,\n        -0.30181533, -0.30181533],\n       [ 0.29433075,  0.29433075,  0.29436478, ..., -0.27594185,\n        -0.27591783, -0.27591783],\n       ...,\n       [ 0.02594377,  0.02594377,  0.02594201, ...,  0.06056742,\n         0.06057847,  0.06057847],\n       [-0.03358313, -0.03358313, -0.03357612, ...,  0.05812103,\n         0.0581184 ,  0.0581184 ],\n       [-0.04917536, -0.04917536, -0.049166  , ...,  0.05161405,\n         0.0516182 ,  0.0516182 ]], dtype=float32)\nCoordinates:\n  * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n  * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64\n</code></pre> <p>Para <code>wgvin</code>:</p> ComandoResultado <pre><code>ncep_b.balprojs['wgvin']\n</code></pre> <pre><code>&lt;xarray.DataArray 'wgvin' (level: 64, latitude: 386)&gt;\narray([[-2.0349323e-07, -2.0356120e-07, -2.0368390e-07, ...,\n         2.4741092e-07,  2.4741092e-07,  0.0000000e+00],\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       ...,\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       [ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00, ...,\n         0.0000000e+00,  0.0000000e+00,  9.1390668e-39]], dtype=float32)\nCoordinates:\n  * latitude  (latitude) float64 -90.0 -89.53 -89.06 -88.6 ... 89.06 89.53 90.0\n  * level     (level) int64 1 2 3 4 5 6 7 8 9 10 ... 56 57 58 59 60 61 62 63 64\n</code></pre> <p>Para obter os valores m\u00ednimos e m\u00e1ximos, eg., dos coeficientes de regress\u00e3o da velocidade potencial (<code>bgvin</code>), pode-se utilizar os m\u00e9todos <code>min()</code> ou <code>max()</code> do m\u00f3dulo <code>xarray</code>:</p> ComandoResultado <pre><code>ncep_b.balprojs['bgvin'].min()\n</code></pre> <pre><code>&lt;xarray.DataArray 'bgvin' ()&gt;\narray(-0.33616406, dtype=float32)\n</code></pre> <p>E para <code>max()</code>:</p> ComandoResultado <pre><code>ncep_b.balprojs['bgvin'].max()\n</code></pre> <pre><code>&lt;xarray.DataArray 'bgvin' ()&gt; \narray(0.3307993, dtype=float32)\n</code></pre> <p>De forma simplificada, pode-se fazer tamb\u00e9m:</p> ComandoResultado <pre><code>ncep_b.balprojs['bgvin'].values.min(), ncep_b.balprojs['bgvin'].values.max()\n</code></pre> <pre><code>(-0.33616406, 0.3307993)\n</code></pre> <p>Para plotar os coeficcientes de proje\u00e7\u00e3o da velocidade potencial <code>bgvin</code>, basta utilizar o m\u00e9todo <code>plot()</code> do m\u00f3dulo <code>xarray</code>:</p> ComandoResultado <pre><code>ncep_b.balprojs['bgvin'].plot()\n</code></pre> <p></p> <p>Para <code>cptec_b</code>:</p> ComandoResultado <pre><code>cptec_b.balprojs['bgvin'].plot()\n</code></pre> <p></p> <p>Para comparar os coeficientes de proje\u00e7\u00e3o das matrizes instanciadas por <code>ncep_b</code> e <code>cptec_b</code>, pode-se seguir os exemplos a seguir.</p> <p>Observe que os coeficientes de proje\u00e7\u00e3o da temperatura <code>agvin</code>, para as inst\u00e2ncias <code>ncep_b</code> e <code>cptec_b</code>, possuem uma dimens\u00e3o extra denominada <code>level_2</code>. Esta dimens\u00e3o extra precisa ser fixada para um dos n\u00edveis contidos nas inst\u00e2ncias. Utilize o comando <code>ncep_b.levs</code> e <code>cptec_b.levs</code> para obter os valores poss\u00edveis para isto (fazendo-se <code>isel(level_2=0)</code> escolhe-se o primeiro n\u00edvel, pr\u00f3ximo \u00e0 superf\u00edcie e <code>isel(level_2=-1)</code> escolhe-se o \u00faltimo n\u00edvel, pr\u00f3ximo ao topo do modelo).</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.balprojs['agvin'].isel(level_2=0).plot.contourf(ax=ax[0])#, vmin=0, vmax=5e-7)\ncptec_b.balprojs['agvin'].isel(level_2=0).plot.contourf(ax=ax[1])#, vmin=0, vmax=5e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Projection of the Stream Function ($\\psi$) at the level 0 over the balanced part of Temperature (agvin, level_2=0)')\nplt.show()\n</code></pre> <p></p> <p>E para o \u00faltimo n\u00edvel em ambas as matrizes:</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.balprojs['agvin'].isel(level_2=-1).plot.contourf(ax=ax[0])#, vmin=0, vmax=5e-7)\ncptec_b.balprojs['agvin'].isel(level_2=-1).plot.contourf(ax=ax[1])#, vmin=0, vmax=5e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Projection of the Stream Function ($\\psi$) at the level -1 over the balanced part of Temperature (agvin, level_2=-1)')\nplt.show()\n</code></pre> <p></p> <p>Para o record <code>bgvin</code>:</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.balprojs['bgvin'].plot.contourf(ax=ax[0])#, vmin=0, vmax=0.5)\ncptec_b.balprojs['bgvin'].plot.contourf(ax=ax[1])#, vmin=0, vmax=0.5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Projection of the Stream Function ($\\psi$) over the balanced part of Potential Velocity (bgvin)')\nplt.show()\n</code></pre> <p></p> <p>Para o record <code>wgvin</code>:</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.balprojs['wgvin'].plot.contourf(ax=ax[0])#, vmin=-3e-7, vmax=3e-7)\ncptec_b.balprojs['wgvin'].plot.contourf(ax=ax[1])#, vmin=-3e-7, vmax=3e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Projection of the Stream Function ($\\psi$) over the balanced part of Surface Pressure (wgvin)')\nplt.show()\n</code></pre> <p></p>"},{"location":"pt/uso/#amplitudes-desvios-padrao","title":"Amplitudes (desvios-padr\u00e3o)","text":"<p>Para verificar e comparar as amplitudes das inst\u00e2ncias <code>ncep_b</code> e <code>cptec_b</code>, siga os exemplos a seguir.</p> <p>Aviso</p> <p>Os records de oz\u00f4nio, conte\u00fado de \u00e1gua l\u00edquida em nuvens e temperatura da superf\u00edcie do mar (amplitudes e comprimentos de escala horizontais/verticais) s\u00e3o intencionalmente os mesmos entre as duas matrizes mostradas neste notebook. De fato, a matriz B do CPTEC empresta esses records da matriz B do NCEP (fornecida pelo Developmental Testbed Center - DTC) para testes.</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['sf'].plot.contourf(ax=ax[0])#, vmin=0, vmax=6e6)\ncptec_b.amplitudes['sf'].plot.contourf(ax=ax[1])#, vmin=0, vmax=6e6)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of the unbalanced part of Stream Function (sf)')\nplt.show()\n</code></pre> <p></p> <p>No exemplo a seguir, s\u00e3o comparados os perfis verticais com as amplitudes de <code>sf</code> das inst\u00e2ncias <code>ncep_b</code> e <code>cptec_b</code>:</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['sf'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['sf'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of the unbalanced part of Stream Function (sf)')\nplt.show()\n</code></pre> <p></p> <p>Para a velocidade potencial (<code>vp</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['vp'].plot.contourf(ax=ax[0])#, vmin=0, vmax=6e6)\ncptec_b.amplitudes['vp'].plot.contourf(ax=ax[1])#, vmin=0, vmax=6e6)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of the unbalanced part of Velocity Potential Function (vp)')\nplt.show()\n</code></pre> <p></p> <p>Para o perfil da velocidade potencial (<code>vp</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['vp'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['vp'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of the unbalanced part of Velocity Potential (vp)')\nplt.show()\n</code></pre> <p></p> <p>Para a temperatura (<code>t</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['t'].plot.contourf(ax=ax[0])#, vmin=0, vmax=5)\ncptec_b.amplitudes['t'].plot.contourf(ax=ax[1])#, vmin=0, vmax=5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of the unbalanced part of Temperature (t)')\nplt.show()\n</code></pre> <p></p> <p>Para o perfil da temperatura (<code>t</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['t'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['t'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of the unbalanced part of Temperature (t)')\nplt.show()\n</code></pre> <p></p> <p>Para a umidade relativa (<code>q</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['q'].plot.contourf(ax=ax[0])#, vmin=0, vmax=0.5)\ncptec_b.amplitudes['q'].plot.contourf(ax=ax[1])#, vmin=0, vmax=0.5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of Relative Humidity (q)')\nplt.show()\n</code></pre> <p></p> <p>Para o perfil da umidade relativa (<code>q</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['q'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['q'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of Relative Humidity (q)')\nplt.show()\n</code></pre> <p></p> <p>Para o oz\u00f4nio (<code>oz</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['oz'].plot.contourf(ax=ax[0])#, vmin=0, vmax=7.5e-7)\ncptec_b.amplitudes['oz'].plot.contourf(ax=ax[1])#, vmin=0, vmax=7.5e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of Ozone (oz)')\nplt.show()\n</code></pre> <p></p> <p>Para o perfil do oz\u00f4nio (<code>oz</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['oz'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['oz'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of Ozone (oz)')\nplt.show()\n</code></pre> <p></p> <p>Para o conte\u00fado de \u00e1gua l\u00edquida (<code>cw</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['cw'].plot.contourf(ax=ax[0])#, vmin=0, vmax=7.5e-7)\ncptec_b.amplitudes['cw'].plot.contourf(ax=ax[1])#, vmin=0, vmax=7.5e-7)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Standard Deviation of Cloud Water (cw)')\nplt.show()\n</code></pre> <p></p> <p>Para o perfil do conte\u00fado de \u00e1gua l\u00edquida (<code>cw</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(8,5))\n\nncep_b.amplitudes['cw'].mean(dim='latitude').plot(ax=ax[0], y='level')\ncptec_b.amplitudes['cw'].mean(dim='latitude').plot(ax=ax[1], y='level')\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Profile of the Standard Deviation of Cloud Water (cw)')\nplt.show()\n</code></pre> <p></p> <p>Para press\u00e3o (<code>ps</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.amplitudes['ps'].plot(ax=ax[0])#, vmin=0, vmax=0.2)\ncptec_b.amplitudes['ps'].plot(ax=ax[1])#, vmin=0, vmax=0.2)\n\nax[0].set_title('NCEP')\nax[1].set_title('CPTEC')\n\nplt.suptitle('Standard Deviation of Surface Pressure (ps)')\nplt.show()\n</code></pre> <p></p> <p>Nas figuras a seguir, s\u00e3o mostradas as aplitudes de <code>sst</code> das inst\u00e2ncias <code>ncep_b</code> e <code>cptec_b</code>.</p> ComandoResultado <pre><code>plt.figure(figsize=(20,4))#, constrained_layout=True)\n\nax1 = plt.subplot(1, 2, 1, projection=ccrs.PlateCarree())\nax1.add_feature(cfeature.NaturalEarthFeature('physical', 'land', '110m', edgecolor='face', facecolor='white'))\nobj1 = ax1.contourf(ncep_b.lons, ncep_b.lats, ncep_b.amplitudes['sst'], 60, transform=ccrs.PlateCarree())\nplt.colorbar(obj1)\nax1.coastlines()\n\nax2 = plt.subplot(1, 2, 2, projection=ccrs.PlateCarree())\nax2.add_feature(cfeature.NaturalEarthFeature('physical', 'land', '110m', edgecolor='face', facecolor='white'))\nobj2 = ax2.contourf(cptec_b.lons, cptec_b.lats, cptec_b.amplitudes['sst'], 60, transform=ccrs.PlateCarree())\nplt.colorbar(obj2)\nax2.coastlines()\n\nax1.set_title('NCEP')\nax2.set_title('CPTEC')\n\nplt.suptitle('Standard Deviation of Sea Surface Temperature (sst)')\nplt.show()\n</code></pre> <p></p>"},{"location":"pt/uso/#comprimentos-de-escala-horizontais","title":"Comprimentos de escala horizontais","text":"<p>Assim como as amplitudes, os comprimentos de escala horizontais das inst\u00e2ncias <code>ncep_b</code> e <code>cptec_b</code> tamb\u00e9m podem ser comparadas. Veja os exemplos a seguir:</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['sf'].plot.contourf(ax=ax[0])#, vmin=0, vmax=1.5e6)\ncptec_b.hscales['sf'].plot.contourf(ax=ax[1])#, vmin=0, vmax=1.5e6)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Stream Function (sf)')\nplt.show()\n</code></pre> <p></p> <p>Para a velocidade potencial (<code>vp</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['vp'].plot.contourf(ax=ax[0])#, vmin=0, vmax=1.5e6)\ncptec_b.hscales['vp'].plot.contourf(ax=ax[1])#, vmin=0, vmax=1.5e6)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Velocity Potential (vp)')\nplt.show()\n</code></pre> <p></p> <p>Para a temperatura (<code>t</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['t'].plot.contourf(ax=ax[0])#, vmin=0, vmax=3.5e5)\ncptec_b.hscales['t'].plot.contourf(ax=ax[1])#, vmin=0, vmax=3.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Temperature (t)')\nplt.show()\n</code></pre> <p></p> <p>Para a umidade (<code>q</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['q'].plot.contourf(ax=ax[0])#, vmin=0, vmax=1.5e5)\ncptec_b.hscales['q'].plot.contourf(ax=ax[1])#, vmin=0, vmax=1.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Relative Humidity (q)')\nplt.show()\n</code></pre> <p></p> <p>Para o oz\u00f4nio (<code>oz</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['oz'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.hscales['oz'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Ozone (oz)')\nplt.show()\n</code></pre> <p></p> <p>Para a press\u00e3o (<code>ps</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.hscales['ps'].plot(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.hscales['ps'].plot(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Horizontal Length Scale of Surface Pressure (ps)')\nplt.show()\n</code></pre> <p></p> <p>Para a temperatura da superf\u00edcie do mar (<code>sst</code>):</p> ComandoResultado <pre><code>plt.figure(figsize=(20,4))#, constrained_layout=True)\n\nax1 = plt.subplot(1, 2, 1, projection=ccrs.PlateCarree())\nax1.add_feature(cfeature.NaturalEarthFeature('physical', 'land', '110m', edgecolor='face', facecolor='white'))\nobj1 = ax1.contourf(ncep_b.lons, ncep_b.lats, ncep_b.hscales['sst'], 60, transform=ccrs.PlateCarree())\nplt.colorbar(obj1)\nax1.coastlines()\n\nax2 = plt.subplot(1, 2, 2, projection=ccrs.PlateCarree())\nax2.add_feature(cfeature.NaturalEarthFeature('physical', 'land', '110m', edgecolor='face', facecolor='white'))\nobj2 = ax2.contourf(cptec_b.lons, cptec_b.lats, cptec_b.hscales['sst'], 60, transform=ccrs.PlateCarree())\nplt.colorbar(obj2)\nax2.coastlines()\n\nax1.set_title('NCEP')\nax2.set_title('CPTEC')\n\nplt.suptitle('Horizontal Length Scale of Sea Surface Temperature (ps)')\nplt.show()\n</code></pre> <p></p>"},{"location":"pt/uso/#comprimentos-de-escala-verticais","title":"Comprimentos de escala verticais","text":"<p>Assim como as amplitudes e os comprimentos de escala horizontais, os comprimentos de escala verticais das inst\u00e2ncias <code>ncep_b</code> e <code>cptec_b</code> tamb\u00e9m podem ser comparadas. Veja os exemplos a seguir:</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['sf'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['sf'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Stream Function (sf)')\nplt.show()\n</code></pre> <p></p> <p>Para a velocidade potencial (<code>vp</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['vp'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['vp'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Velocity Potential (vp)')\nplt.show()\n</code></pre> <p></p> <p>Para a temperatura (<code>t</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['t'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['t'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Temperature (t)')\nplt.show()\n</code></pre> <p></p> <p>Para a umidade relativa (<code>q</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['q'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['q'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Relative Humidity (q)')\nplt.show()\n</code></pre> <p></p> <p>Para o oz\u00f4nio (<code>oz</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['oz'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['oz'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Ozone (oz)')\nplt.show()\n</code></pre> <p></p> <p>Para o conte\u00fado de \u00e1gua l\u00edquida (<code>cw</code>):</p> ComandoResultado <pre><code>fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10,4))\n\nncep_b.vscales['cw'].plot.contourf(ax=ax[0])#, vmin=0, vmax=2.5e5)\ncptec_b.vscales['cw'].plot.contourf(ax=ax[1])#, vmin=0, vmax=2.5e5)\n\nax[0].set_title('NCEP (64 levels)')\nax[1].set_title('CPTEC (28 levels)')\n\nplt.suptitle('Vertical Length Scale of Cloud Water (cw)')\nplt.show()\n</code></pre> <p></p> <ol> <li> <p>Matriz de Covari\u00e2ncias dos Erros de Previs\u00e3o Aplicada ao Sistema de Assimila\u00e7\u00e3o de Dados Global do CPTEC: Experimentos com Observa\u00e7\u00e3o \u00danica. Dispon\u00edvel em: https://www.scielo.br/j/rbmet/a/8LQNdCV9jJM9whJdpkDLfCh/abstract/?lang=pt&amp;format=html.\u00a0\u21a9</p> </li> <li> <p>Dispon\u00edvel em https://dtcenter.org/community-code/gridpoint-statistical-interpolation-gsi/documentation.\u00a0\u21a9</p> </li> </ol>"}]}